import asyncio
from llm.local_search import DeepSeekService
from utils.draw_circle import draw_circles_with_json_input
from utils.parse_json_response import parse_json_response
from prompts import EXTRACT_DATA_DRAW_CIRCLE_PROMPT

async def main():
    TYPE_EXERCISE = "Ho√†n th√†nh d√£y s·ªë"
    UNIT = "C√°c s·ªë 0, 1, 2, 3, 4, 5"
    DETAIL ="""
    ƒêi·ªÅn s·ªë th√≠ch h·ª£p v√†o ch·ªó tr·ªëng
    ƒê√°p √°n : C√°c s·ªë c·∫ßn ƒëi·ªÅn theo th·ª© t·ª± t·ª´ tr√°i qua ph·∫£i l√†: 3, 2, 4, 1, 5

    T·∫°o 2 h√¨nh ·∫£nh 1 h√¨nh tr√≤n c√≥ s·ªë 1 ·ªü ch√≠nh gi·ªØa 
    T·∫°o 2 h√¨nh ·∫£nh 1 h√¨nh tr√≤n c√≥ s·ªë 2 ·ªü ch√≠nh gi·ªØa
    T·∫°o 2 h√¨nh ·∫£nh 1 h√¨nh tr√≤n c√≥ s·ªë 3 ·ªü ch√≠nh gi·ªØa
    T·∫°o 2 h√¨nh ·∫£nh 1 h√¨nh tr√≤n c√≥ s·ªë 4 ·ªü ch√≠nh gi·ªØa
    T·∫°o 2 h√¨nh ·∫£nh 1 h√¨nh tr√≤n c√≥ s·ªë 5 ·ªü ch√≠nh gi·ªØa
    T·∫°o 5 h√¨nh ·∫£nh 1 h√¨nh tr√≤n kh√¥ng in s·ªë
    Th·ª© t∆∞ xu·∫•t hi·ªán c·ªßa c√°c h√¨nh tr√≤n t√≠nh t·ª´ tr√°i sang ph·∫£i:
    - H√¨nh tr√≤n c√≥ s·ªë 1 ·ªü ch√≠nh gi·ªØa : [0, 5]
    - H√¨nh tr√≤n c√≥ s·ªë 2 ·ªü ch√≠nh gi·ªØa : [1, 11]
    - H√¨nh tr√≤n c√≥ s·ªë 3 ·ªü ch√≠nh gi·ªØa : [7, 12]
    - H√¨nh tr√≤n c√≥ s·ªë 4 ·ªü ch√≠nh gi·ªØa : [3, 13]
    - H√¨nh tr√≤n c√≥ s·ªë 5 ·ªü ch√≠nh gi·ªØa : [4, 9]
    - H√¨nh tr√≤n kh√¥ng c√≥ s·ªë ·ªü ch√≠nh gi·ªØa : [2, 6, 8, 10, 14]
    """
    prompt = EXTRACT_DATA_DRAW_CIRCLE_PROMPT.format(
        type_exercise=TYPE_EXERCISE,
        unit=UNIT,
        detail=DETAIL
    )

    service = DeepSeekService()

    print("\n" + "=" * 60)
    print("ü§ñ DeepSeek Interactive Mode")
    print("=" * 60)
    
    json_mode = True  # M·∫∑c ƒë·ªãnh b·∫≠t JSON mode
    
    try:
        print(f"\nüìù JSON Mode: {'ON' if json_mode else 'OFF'}")
        print(f"\nüí¨ Generated Prompt:")
        print("-" * 60)
        print(f"Lo·∫°i b√†i: {TYPE_EXERCISE.strip()}")
        print(f"T√™n b√†i h·ªçc: {UNIT.strip()}")
        print(f"M√¥ t·∫£ h√¨nh v·∫Ω: {DETAIL.strip()}")
        print("-" * 60)
        
        print("\n‚è≥ Generating response from LLM...")
        response = await service.generate_message(prompt, is_json_mode=json_mode)
        
        print("\n" + "=" * 60)
        print("ü§ñ LLM Response:")
        print("-" * 60)
        
        print(response)
        if json_mode:
             # ‚úÖ Parse JSON v·ªõi auto-fix
            parsed = parse_json_response(response)
            
            if parsed is None:
                print(f"‚ùå Invalid JSON - Cannot parse")
                print(f"Raw response: {response}")
                return
            
            # ‚úÖ V·∫Ω h√¨nh d·ª±a tr√™n JSON response (t·ª± ƒë·ªông x·ª≠ l√Ω dict ho·∫∑c list)
            print("\n" + "=" * 60)
            draw_circles_with_json_input(parsed, output_file='circles_output.png')
        else:
            print(response)
        
        print("=" * 60)
        
        # Print statistics
        print("\nüìä Call Statistics")
        print("-" * 60)
        stats = service.get_call_stats()
        print(f"Total calls: {stats['total_calls']}")
        print(f"Total time: {stats['total_time']:.2f}s")
        print(f"Average duration: {stats['average_duration']:.2f}s")
        print(f"Model: {stats['model']}")
        
    except Exception as e:
        print(f"\n‚ùå Error: {str(e)}")
    
    finally:
        await service.close_session()
        print("\n‚úÖ Session closed")

if __name__ == "__main__":
    asyncio.run(main())