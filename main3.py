import asyncio
from llm.local_search import DeepSeekService
from llm.prompt_templates import EXTRACT_DATA_DRAW_COLUMN_CALC_PROMPT
from drawings.draw_column_calc import draw_column_calc_with_json_input
from utils.parse_json_response import parse_json_response

async def main():
    TYPE_EXERCISE = "T√≠nh"
    QUESTION = "Ch·ªçn ph√©p ƒë·∫∑t t√≠nh r·ªìi t√≠nh ƒë√∫ng? (10ƒë). ƒê√°p √°n: D"
    DETAIL ="""   
    H√¨nh ·∫£nh ph√©p t√≠nh:
    H√¨nh A: Vi·∫øt s·ªë h·∫°ng th·ª© 1 l√† 24 678 ·ªü h√†ng tr√™n, s·ªë h·∫°ng th·ª© 2 l√† 4 vi·∫øt h√†ng d∆∞·ªõi th·∫≥ng h√†ng v·ªõi s·ªë 2 ·ªü h√†ng ch·ª•c ngh√¨n c·ªßa s·ªë h·∫°ng th·ª© 1. D·∫•u x ·ªü gi·ªØa. D·∫•u k·∫ª ngang d∆∞·ªõi s·ªë h·∫°ng th·ª© 2. K·∫øt qu·∫£ l√† 98 712.
    H√¨nh B: Vi·∫øt s·ªë h·∫°ng th·ª© 1 l√† 24 678 ·ªü h√†ng tr√™n, s·ªë h·∫°ng th·ª© 2 l√† 4 vi·∫øt h√†ng d∆∞·ªõi th·∫≥ng h√†ng v·ªõi s·ªë 6 ·ªü h√†ng trƒÉm c·ªßa s·ªë h·∫°ng th·ª© 1. D·∫•u x ·ªü gi·ªØa. D·∫•u k·∫ª ngang d∆∞·ªõi s·ªë 4. K·∫øt qu·∫£ l√† 98 712.
    H√¨nh C: Vi·∫øt s·ªë h·∫°ng th·ª© 1 l√† 24 678 ·ªü h√†ng tr√™n, s·ªë h·∫°ng th·ª© 2 l√† 4 vi·∫øt h√†ng d∆∞·ªõi th·∫≥ng h√†ng v·ªõi s·ªë 7 ·ªü h√†ng ch·ª•c c·ªßa s·ªë h·∫°ng th·ª© 1. D·∫•u x ·ªü gi·ªØa. D·∫•u k·∫ª ngang d∆∞·ªõi s·ªë 4. K·∫øt qu·∫£ l√† 98 712.
    H√¨nh D: Vi·∫øt s·ªë h·∫°ng th·ª© 1 l√† 24 678 ·ªü h√†ng tr√™n, s·ªë h·∫°ng th·ª© 2 l√† 4 vi·∫øt h√†ng d∆∞·ªõi th·∫≥ng h√†ng v·ªõi s·ªë 8 ·ªü h√†ng ƒë∆°n c·ªßa s·ªë h·∫°ng th·ª© 1. D·∫•u x ·ªü gi·ªØa. D·∫•u k·∫ª ngang d∆∞·ªõi s·ªë 4. K·∫øt qu·∫£ l√† 98 712.
    """
    prompt = EXTRACT_DATA_DRAW_COLUMN_CALC_PROMPT.format(
        type_exercise=TYPE_EXERCISE,
        question=QUESTION,
        detail=DETAIL
    )

    service = DeepSeekService()

    print("\n" + "=" * 60)
    print("ü§ñ DeepSeek Interactive Mode")
    print("=" * 60)
    
    json_mode = True  # M·∫∑c ƒë·ªãnh b·∫≠t JSON mode
    
    try:
        print(f"\nüìù JSON Mode: {'ON' if json_mode else 'OFF'}")
        response = await service.generate_message(prompt, is_json_mode=json_mode)
        
        print("\n" + "=" * 60)
        print("ü§ñ LLM Response:")
        print("-" * 60)
        
        print(response)
        if json_mode:
             # ‚úÖ Parse JSON v·ªõi auto-fix
            parsed = parse_json_response(response)
            
            if parsed is None:
                print(f"‚ùå Invalid JSON - Cannot parse")
                print(f"Raw response: {response}")
                return
            
            # ‚úÖ V·∫Ω h√¨nh d·ª±a tr√™n JSON response (t·ª± ƒë·ªông x·ª≠ l√Ω dict ho·∫∑c list)
            print("\n" + "=" * 60)
            draw_column_calc_with_json_input(parsed, output_file='column_calc_output.png')
        else:
            print(response)
        
        print("=" * 60)
        
        # Print statistics
        print("\nüìä Call Statistics")
        print("-" * 60)
        stats = service.get_call_stats()
        print(f"Total calls: {stats['total_calls']}")
        print(f"Total time: {stats['total_time']:.2f}s")
        print(f"Average duration: {stats['average_duration']:.2f}s")
        print(f"Model: {stats['model']}")
        
    except Exception as e:
        print(f"\n‚ùå Error: {str(e)}")
    
    finally:
        await service.close_session()
        print("\n‚úÖ Session closed")

if __name__ == "__main__":
    asyncio.run(main())