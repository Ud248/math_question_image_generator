import json
import re

def parse_json_response(response: str):
    """
    Parse JSON response t·ª´ LLM, t·ª± ƒë·ªông fix c√°c l·ªói format th∆∞·ªùng g·∫∑p
    
    Args:
        response: Raw response t·ª´ LLM
        
    Returns:
        dict ho·∫∑c list: Parsed JSON data
    """
    response = response.strip()
    
    # Case 1: Response l√† array h·ª£p l·ªá [...]
    if response.startswith('[') and response.endswith(']'):
        try:
            return json.loads(response)
        except json.JSONDecodeError as e:
            print(f"‚ö†Ô∏è JSON parse error: {e}")
            return None
    
    # Case 2: Response l√† object h·ª£p l·ªá {...}
    if response.startswith('{') and response.endswith('}'):
        try:
            parsed = json.loads(response)
            # N·∫øu parse th√†nh c√¥ng v√† l√† dict ƒë∆°n l·∫ª, return lu√¥n
            return parsed
        except json.JSONDecodeError:
            pass
    
    # Case 3: Response c√≥ nhi·ªÅu objects nh∆∞ng thi·∫øu d·∫•u [ ]
    # V√≠ d·ª•: {...}, {...}, {...}
    if response.startswith('{'):
        try:
            # Th√™m d·∫•u [ ] bao ngo√†i
            fixed_response = '[' + response + ']'
            print("üîß Auto-fixed: Added [ ] wrapper around objects")
            return json.loads(fixed_response)
        except json.JSONDecodeError as e:
            print(f"‚ö†Ô∏è JSON parse error after fix: {e}")
            return None
    
    # Case 4: Response c√≥ markdown code block ```json ... ```
    json_match = re.search(r'```(?:json)?\s*(\[.*?\]|\{.*?\})\s*```', response, re.DOTALL)
    if json_match:
        try:
            print("üîß Auto-fixed: Extracted from markdown code block")
            return json.loads(json_match.group(1))
        except json.JSONDecodeError as e:
            print(f"‚ö†Ô∏è JSON parse error: {e}")
            return None
    
    print("‚ùå Cannot parse JSON response")
    return None
