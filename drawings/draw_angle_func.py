"""
draw_angle.py
V·∫Ω ·∫£nh minh h·ªça g√≥c ƒë∆°n gi·∫£n ch·ªâ c·∫ßn g√≥c v√† t√™n c√°c tia
Y√™u c·∫ßu: matplotlib, numpy
"""
import matplotlib.pyplot as plt
import numpy as np
import math

def draw_angle(angle_deg, vertex_name='O', ray1_name='A', ray2_name='B', vertex_label_color='black',
               ray1_color='blue', ray2_color='red',output_file='angle.png', draw_arc = False):
    """
    V·∫Ω g√≥c ƒë∆°n gi·∫£n - ch·ªâ c·∫ßn g√≥c v√† t√™n c√°c tia

    Args:
        angle_deg (float): G√≥c c·∫ßn v·∫Ω (ƒë·ªô), v√≠ d·ª•: 50, 120
        vertex_name (str): T√™n ƒë·ªânh, v√≠ d·ª•: 'O', 'A', 'V'
        ray1_name (str): T√™n ƒëi·ªÉm tr√™n tia th·ª© nh·∫•t, v√≠ d·ª•: 'A', 'B'
        ray2_name (str): T√™n ƒëi·ªÉm tr√™n tia th·ª© hai, v√≠ d·ª•: 'B', 'C',
        vertex_label_color (str): M√†u nh√£n ƒë·ªânh, v√≠ d·ª•: 'black', 'purple', '#000000'
        ray1_color (str): M√†u tia th·ª© nh·∫•t, v√≠ d·ª•: 'blue', 'red', '#FF5733'
        ray2_color (str): M√†u tia th·ª© hai, v√≠ d·ª•: 'red', 'green', '#33FF57'
        output_file (str): T√™n file output, v√≠ d·ª•: 'angle.png'
        draw_arc (bol): C√≥ v·∫Ω cung tr√≤n bi·ªÉu di·ªÖn d·ªô g√≥c hay kh√¥ng, m·∫∑c ƒë·ªãnh l√† kh√¥ng

    Returns:
        str: ƒê∆∞·ªùng d·∫´n file ƒë√£ l∆∞u

    Examples:
        >>> # V·∫Ω g√≥c AOB = 50¬∞
        >>> draw_angle(50, 'O', 'A', 'B')

        >>> # V·∫Ω g√≥c XYZ = 120¬∞ v·ªõi m√†u t√πy ch·ªânh
        >>> draw_angle(120, 'Y', 'X', 'Z', 'purple', 'orange', 'angle_XYZ.png')
    """
    # Chuy·ªÉn ƒë·ªïi sang radian
    angle_rad = math.radians(angle_deg)

    # Thi·∫øt l·∫≠p ƒë·ªô d√†i tia v√† b√°n k√≠nh cung
    ray_length = 1.0
    arc_radius = 0.35

    # ƒê·ªãnh nghƒ©a c√°c ƒëi·ªÉm
    vertex = np.array([0.0, 0.0])
    point1 = np.array([ray_length, 0.0])
    point2 = np.array([ray_length * math.cos(angle_rad),
                       ray_length * math.sin(angle_rad)])

    # T·∫°o figure
    fig, ax = plt.subplots(figsize=(5, 5))

    # V·∫Ω tia th·ª© nh·∫•t (t·ª´ vertex ƒë·∫øn point1)
    ax.plot([vertex[0], point1[0]], [vertex[1], point1[1]],
            color=ray1_color, lw=2.5, label=f'Tia {vertex_name}{ray1_name}')

    # V·∫Ω tia th·ª© hai (t·ª´ vertex ƒë·∫øn point2)
    ax.plot([vertex[0], point2[0]], [vertex[1], point2[1]],
            color=ray2_color, lw=2.5, label=f'Tia {vertex_name}{ray2_name}')

    # V·∫Ω c√°c ƒëi·ªÉm
    ax.scatter([vertex[0]], [vertex[1]], s=40, c=vertex_label_color, zorder=5)
    ax.scatter([point1[0]], [point1[1]], s=40, c=vertex_label_color, zorder=5)
    ax.scatter([point2[0]], [point2[1]], s=40, c=vertex_label_color, zorder=5)

    # ƒê·∫∑t nh√£n cho c√°c ƒëi·ªÉm
    ax.text(point1[0] + 0.05, point1[1] - 0.05, ray1_name,
            fontsize=14, fontweight='bold', color=vertex_label_color)
    ax.text(vertex[0] - 0.08, vertex[1] - 0.12, vertex_name,
            fontsize=14, fontweight='bold', color=vertex_label_color)
    if angle_deg < 90:
        ax.text(point2[0] + 0.05, point2[1] + 0.03, ray2_name,
                fontsize=14, fontweight='bold', color=vertex_label_color)
    else:
        ax.text(point2[0] - 0.05, point2[1] + 0.08, ray2_name,
                fontsize=14, fontweight='bold', color=vertex_label_color)

    if draw_arc:
        # V·∫Ω cung tr√≤n bi·ªÉu di·ªÖn g√≥c
        theta = np.linspace(0, angle_rad, 120)
        ax.plot(arc_radius * np.cos(theta),
                arc_radius * np.sin(theta),
                color='green', lw=2.5)

        # Nh√£n g√≥c ·ªü gi·ªØa cung
        mid_angle = angle_rad / 2
        label_x = arc_radius * math.cos(mid_angle) + 0.08
        label_y = arc_radius * math.sin(mid_angle) + 0.03
        ax.text(label_x, label_y, f"{angle_deg}¬∞",
                fontsize=13, fontweight='bold', color='green',
                bbox=dict(boxstyle='round,pad=0.3', facecolor='white',
                        edgecolor='green', alpha=0.8))

    # T√≠nh to√°n xlim v√† ylim dynamic d·ª±a tr√™n t·∫•t c·∫£ c√°c ƒëi·ªÉm
    margin = 0.2
    all_x = [vertex[0], point1[0], point2[0]]
    all_y = [vertex[1], point1[1], point2[1]]
    
    x_min, x_max = min(all_x), max(all_x)
    y_min, y_max = min(all_y), max(all_y)
    
    # Th√™m margin cho ƒë·∫πp
    ax.set_xlim(x_min - margin, x_max + margin)
    ax.set_ylim(y_min - margin, y_max + margin)

    # C√†i ƒë·∫∑t hi·ªÉn th·ªã
    ax.set_aspect('equal', 'box')
    ax.axis('off')

    # L∆∞u file
    fig.savefig(output_file, bbox_inches='tight', dpi=150, transparent=True)
    plt.close(fig)

    print(f"‚úÖ ƒê√£ v·∫Ω g√≥c {vertex_name}{ray1_name}{ray2_name} = {angle_deg}¬∞")
    print(f"üìÅ File: {output_file}")
    return output_file

def draw_multiple_angles(angles_data, output_prefix='angle'):
    """
    V·∫Ω nhi·ªÅu g√≥c c√πng l√∫c

    Args:
        angles_data (list): List c√°c dict ch·ª©a th√¥ng tin g√≥c
            M·ªói dict c√≥ format:
            {
                'angle_deg': 50,
                'vertex_name': 'O',
                'ray1_name': 'A',
                'ray2_name': 'B',
                'ray1_color': 'blue',  # t√πy ch·ªçn
                'ray2_color': 'red',   # t√πy ch·ªçn
                'vertex_label_color': 'black'  # t√πy ch·ªçn
            }
        output_prefix (str): Ti·ªÅn t·ªë t√™n file output

    Returns:
        list: Danh s√°ch c√°c file ƒë√£ t·∫°o

    Example:
        >>> angles = [
        ...     {'angle_deg': 50, 'vertex_name': 'O', 'ray1_name': 'A', 'ray2_name': 'B'},
        ...     {'angle_deg': 120, 'vertex_name': 'X', 'ray1_name': 'Y', 'ray2_name': 'Z',
        ...      'ray1_color': 'purple', 'ray2_color': 'orange'}
        ... ]
        >>> draw_multiple_angles(angles)
    """
    files = []
    for i, data in enumerate(angles_data):
        angle = data.get('angle_deg')
        vertex = data.get('vertex_name', 'O')
        ray1 = data.get('ray1_name', 'A')
        ray2 = data.get('ray2_name', 'B')
        color1 = data.get('ray1_color', 'blue')
        color2 = data.get('ray2_color', 'red')
        vertex_label_color = data.get('vertex_label_color', 'black')
        draw_arc = data.get('draw_arc', False)

        output_file = f"{output_prefix}_{vertex}{ray1}{ray2}_{angle}.png"
        draw_angle(angle, vertex, ray1, ray2, vertex_label_color, color1, color2, output_file, draw_arc)
        files.append(output_file)

    return files

def draw_angles_from_json(angles_data):
    """
    V·∫Ω g√≥c d·ª±a tr√™n d·ªØ li·ªáu JSON t·ª´ LLM
    
    Args:
        angles_data: Dict (1 g√≥c) ho·∫∑c List of dict (nhi·ªÅu g√≥c)
    """
    angles_list = angles_data
    
    if not angles_list:
        print("‚ùå No valid angle data to draw")
        return
    
    print(f"\nüé® Drawing {len(angles_list)} angle(s)...")
    print("=" * 60)
    
    if len(angles_list) == 1:
        # V·∫Ω 1 g√≥c - d√πng draw_angle
        angle_info = angles_list[0]
        print(f"üìê Drawing single angle: {angle_info.get('angle_deg', 'Unknown')}¬∞")
        
        try:
            fig = draw_angle(
                angle_deg=angle_info.get('angle_deg'),
                vertex_name=angle_info.get('vertex_name'),
                ray1_name=angle_info.get('ray1_name'),
                ray2_name=angle_info.get('ray2_name'),
                vertex_label_color=angle_info.get('vertex_label_color'),
                ray1_color=angle_info.get('ray1_color'),
                ray2_color=angle_info.get('ray2_color'),
                draw_arc=angle_info.get('draw_arc')
            )
            print("‚úÖ Single angle drawn successfully!")
            return fig
        except Exception as e:
            print(f"‚ùå Error drawing single angle: {e}")
            return None
    
    else:
        # V·∫Ω nhi·ªÅu g√≥c - d√πng draw_multiple_angles
        print(f"üìê Drawing multiple angles:")
        for i, angle_info in enumerate(angles_list, 1):
            print(f"  {i}. Angle: {angle_info.get('angle_deg', 'Unknown')}¬∞ "
                  f"(Vertex: {angle_info.get('vertex_name', 'N/A')})")
        
        try:
            fig = draw_multiple_angles(angles_list)
            print("‚úÖ Multiple angles drawn successfully!")
            return fig
        except Exception as e:
            print(f"‚ùå Error drawing multiple angles: {e}")
            return None

# ==================== DEMO USAGE ====================
if __name__ == "__main__":
    print("=== Demo V·∫Ω G√≥c ƒê∆°n Gi·∫£n ===\n")

    # V√≠ d·ª• 1: V·∫Ω g√≥c AOB = 50¬∞ (c∆° b·∫£n nh·∫•t)
    print("1. V·∫Ω g√≥c AOB = 50¬∞:")
    draw_angle(angle_deg=50)

    # V√≠ d·ª• 2: V·∫Ω g√≥c XYZ = 120¬∞ v·ªõi t√™n t√πy ch·ªânh
    print("\n2. V·∫Ω g√≥c XYZ = 120¬∞:")
    draw_angle(
        angle_deg=120,
        vertex_name='Y',
        ray1_name='X',
        ray2_name='Z',
        output_file='angle_XYZ.png'
    )

    # V√≠ d·ª• 3: V·∫Ω g√≥c v·ªõi m√†u t√πy ch·ªânh
    print("\n3. V·∫Ω g√≥c MON = 75¬∞ v·ªõi m√†u t√πy ch·ªânh:")
    draw_angle(
        angle_deg=75,
        vertex_name='O',
        ray1_name='M',
        ray2_name='N',
        ray1_color='purple',
        ray2_color='orange',
        output_file='angle_MON.png'
    )

    # V√≠ d·ª• 4: V·∫Ω nhi·ªÅu g√≥c c√πng l√∫c
    print("\n4. V·∫Ω nhi·ªÅu g√≥c c√πng l√∫c:")
    angles = [
        {
            'angle': 30,
            'vertex': 'A',
            'ray1': 'B',
            'ray2': 'C',
            'color1': 'blue',
            'color2': 'red'
        },
        {
            'angle': 90,
            'vertex': 'O',
            'ray1': 'X',
            'ray2': 'Y',
            'color1': 'green',
            'color2': 'purple'
        },
        {
            'angle': 150,
            'vertex': 'P',
            'ray1': 'Q',
            'ray2': 'R',
            'color1': 'cyan',
            'color2': 'magenta'
        }
    ]

    files = draw_multiple_angles(angles, output_prefix='demo')

    print("\n=== Ho√†n t·∫•t ===")
    print(f"ƒê√£ t·∫°o {len(files) + 3} file ·∫£nh")
    print("\nC√°ch s·ª≠ d·ª•ng ƒë∆°n gi·∫£n nh·∫•t:")
    print("  draw_angle(50)  # V·∫Ω g√≥c AOB = 50¬∞")
    print("  draw_angle(120, 'X', 'Y', 'Z')  # V·∫Ω g√≥c XYZ = 120¬∞")
    print("  draw_angle(75, 'O', 'M', 'N', 'purple', 'orange')  # V·ªõi m√†u t√πy ch·ªânh")